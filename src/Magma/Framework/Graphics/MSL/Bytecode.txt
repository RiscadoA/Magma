# Magma Shading Language Bytecode (MSLBC)

MSLBC shaders are accompanied by their respective meta data file (MSLMD) which
stores attribute names, constant buffer names, textures names, and others.

MSLBC instructions have a 8bit op code which dictate the instructions types.
Certain instructions may have params following them.

{ param 1x1 } means that the first param occupies one byte
{ param 3x4 } means that the third param occupies four bytes
Parameters are stored in big endian format

Instructions:
	DECLINT ; 0x00 ; Declares a local integer { variable index stored on param 1x1 }
	DECLFLT ; 0x01 ; Declares a local float { variable index stored on param 1x1 }
	DECLFV2 ; 0x02 ; Declares a local two component floating point vector { variable index stored on param 1x1 }
	DECLFV3 ; 0x03 ; Declares a local three component floating point vector { variable index stored on param 1x1 }
	DECLFV4 ; 0x04 ; Declares a local four component floating point vector { variable index stored on param 1x1 }
	DECLIV2 ; 0x05 ; Declares a local two component integer vector { variable index stored on param 1x1 }
	DECLIV3 ; 0x06 ; Declares a local three component integer vector { variable index stored on param 1x1 }
	DECLIV4 ; 0x07 ; Declares a local four component integer vector { variable index stored on param 1x1 }
	DECLF22 ; 0x08 ; Declares a local 2x2 floating point matrix { variable index stored on param 1x1 }
	DECLF33 ; 0x09 ; Declares a local 3x3 floating point matrix { variable index stored on param 1x1 }
	DECLF44 ; 0x0A ; Declares a local 4x4 floating point matrix { variable index stored on param 1x1 }
	DECLI22 ; 0x0B ; Declares a local 2x2 integer matrix { variable index stored on param 1x1 }
	DECLI33 ; 0x0C ; Declares a local 3x3 integer matrix { variable index stored on param 1x1 }
	DECLI44 ; 0x0D ; Declares a local 4x4 integer matrix { variable index stored on param 1x1 }

	VARIN0	; 0x0E ; Sets a variable index { param 1x1} as the one storing input 0 for operations
	VARIN1	; 0x0F ; Sets a variable index { param 1x1} as the one storing input 1 for operations
	VAROUT	; 0x10 ; Sets a variable index { param 1x1} as the one storing the operations output

	ASSIGN  ; 0x11 ; Assigns the output variable to the input variable 0
	ADD		; 0x12 ; Sets the output variable to the addition of input variable 0 and input variable 1
	SUB		; 0x13 ; Sets the output variable to the subtraction of input variable 0 and input variable 1
	MUL		; 0x14 ; Sets the output variable to the multiplication of input variable 0 and input variable 1
	DIV		; 0x15 ; Sets the output variable to the division of input variable 0 and input variable 1
	AND		; 0x16 ; Sets the output variable to the && of input variable 0 and input variable 1
	OR		; 0x17 ; Sets the output variable to the || of input variable 0 and input variable 1
	NOT		; 0x18 ; Sets the output variable to the ! of input variable 0
	GREATER	; 0x19 ; Sets the output variable to the > of input variable 0 and input variable 1
	LESS	; 0x1A ; Sets the output variable to the < of input variable 0 and input variable 1
	GEQUAL	; 0x1B ; Sets the output variable to the >= of input variable 0 and input variable 1
	LEQUAL	; 0x1C ; Sets the output variable to the <= of input variable 0 and input variable 1
	EQUAL	; 0x1D ; Sets the output variable to the == of input variable 0 and input variable 1
	NEQUAL	; 0x1E ; Sets the output variable to the != of input variable 0 and input variable 1

	SETINT  ; 0x1F ; Sets a int variable { index on param 1x1 } to a int literal { param 2x4 }
	SETFLT  ; 0x20 ; Sets a float variable { index on param 1x1 } to a float literal { param 2x4 }
	SETFV2  ; 0x21 ; Sets a two component floating point vector variable { index on param 1x1 } to a two component floating point vector literal { param 2x8 }
	SETFV3  ; 0x22 ; Sets a three component floating point vector variable { index on param 1x1 } to a three component floating point vector literal { param 2x12 }
	SETFV4  ; 0x23 ; Sets a four component floating point vector variable { index on param 1x1 } to a four component floating point vector literal { param 2x16 }
	SETIV2  ; 0x24 ; Sets a two component integer vector variable { index on param 1x1 } to a two component integer literal { param 2x8 }
	SETIV3  ; 0x25 ; Sets a three component integer vector variable { index on param 1x1 } to a three component integer vector literal { param 2x12 }
	SETIV4  ; 0x26 ; Sets a four component integer vector variable { index on param 1x1 } to a four component integer vector literal { param 2x16 }

	ASFV2CP ; 0x27 ; Assigns a two component floating point vector { on variable output } component { component index on param 2x1 } to the input var 0
	ASFV3CP ; 0x28 ; Assigns a three component floating point vector { on variable output } component { component index on param 2x1 } to the input var 0
	ASFV4CP ; 0x29 ; Assigns a four component floating point vector { on variable output } component { component index on param 2x1 } to the input var 0
	ASIV2CP ; 0x2A ; Assigns a two component integer vector { on variable output } component { component index on param 2x1 } to the input var 0
	ASIV3CP ; 0x2B ; Assigns a three component integer vector { on variable output } component { component index on param 2x1 } to the input var 0
	ASIV4CP ; 0x2C ; Assigns a four component integer vector { on output variable } component { component index on param 2x1 } to the input var 0

	AGFV2CP ; 0x2D ; Assigns the output variable to a component { index on param 1x1 } of a two component floating point vector on the input var 0 
	AGFV3CP ; 0x2E ; Assigns the output variable to a component { index on param 1x1 } of a three component floating point vector on the input var 0 
	AGFV4CP ; 0x2F ; Assigns the output variable to a component { index on param 1x1 } of a four component floating point vector on the input var 0 
	AGIV2CP ; 0x30 ; Assigns the output variable to a component { index on param 1x1 } of a two component integer vector on the input var 0 
	AGIV3CP ; 0x31 ; Assigns the output variable to a component { index on param 1x1 } of a three component integer vector on the input var 0 
	AGIV4CP ; 0x32 ; Assigns the output variable to a component { index on param 1x1 } of a four component integer vector on the input var 0 

	MULMAT	; 0x33 ; Sets the output variable to the multiplication of a matrix on input var 0 and a matrix or vector on input var 1
	
	OPSCOPE ; 0x34 ; Opens a scope
	CLSCOPE ; 0x35 ; Closes the previously opened scope
	DISCARD ; 0x36 ; Discards the current pixel and exits the shader immediately (only works on the pixel shader)
	RETURN	; 0x37 ; Exits the shader immediately

	SMPL2D	; 0x38 ; Sets the output var to the sampled color of a texture on input var 0 on the coordinates on input var 1

Vertex shader MSLBC Example:
	(on vertex shaders, the index 0x00 is reserved for the output vertex screen coordinates variable)

	Meta data:
		Input:
			- FV3 position: index 0x01;
			- FV4 color: index 0x02;
		Output:
			- FV4 color : index 0x03;
		Constant Buffer variables:
			- F44 mvp: index 0x04, buffer 0x00; // Model view projection 4x4 floating point matrix on index 0x04 on buffer 0x00

	Bytecode:
		// Send vertex color to pixel shader
		VARIN0	0x02	// Set as input var 0 the vertex color on index 0x02
		VAROUT	0X03	// Set as output var 0 the pixel color on index 0x03
		ASSIGN			// Sets VAROUT to VARIN0

		// Calculate and send vertex screen position
		VARIN0	0x04	// Set as input var 0 the mvp matrix on index 0x04
		VARIN1	0x01	// Set as input var 1 the vertex world position on index 0x01
		VAROUT	0x00	// Set as output var the vertex screen position on index 0x00
		MULMAT			// Performs matrix multiplication on VARIN0 and VARIN1 and stores the result on VAROUT

Pixel shader MSLBC Example:
	Meta data:
		Input:
			- FV4 color: index 0x00;
		Output:
			- FV4 color: index 0x01, target 0x00; // Output color to render target 0x00
		Constant Buffer variables:
			- FV4 diffuse: index 0x02, buffer 0x01; // Material diffuse color on index 0x02 on buffer 0x01

	Bytecode:
		VARIN0	0x00	// Set as input var 0 the pixel color
		VARIN1	0x02	// Set as input var 1 the material diffuse color
		VAROUT	0x01	// Set as output var the output pixel color
		MUL				// Multiplies VARIN0 and VARIN1 and stores the result on VAROUT
