;	Magma Virtual Machine Language	 (MVL)\1qwsxwd23w
;
;	Example:
;
;	void entry()
;	{
;		Magma.Print("test\n");
;		end;
;	} 


<program> ::= { <function> }
<function> ::= <type> <id> "(" [ <type> <id> { "," <type> <id> } ] ")" "{" <compound-statement> "}"

<block-item> ::= <statement>

<statement> ::= <expression-statement>
			  | <compound-statement>
			  | <throw-statement>
			  | <return-statement>
			  | <yield-statement>
			  | <end-statement>
			  | ";"

<expression-statement> ::= <expression> ";"
<compound-statement> ::= "{" { <statement> } "}"
<throw-statement> ::= "throw" ( "warning" | "error" ) "(" <string-literal> ")" ";"
<return-statement> ::= "return" [ <expression> ] ";"
<yield-statement> ::= "yield" ";"
<end-statement> ::= "end" ";"

<expression> ::= <assignment-term> { "=" <assignment-term> }
<assignment-term> ::= <logic-term> { ( "&&" | "||") <logic->term> }
<logic-term> ::= <condition-term> { ( "==" | "!=" | ">" | "<" | ">=" | "<=" ) <condition->term> }
<condition-term> ::= <factor> { ( "*" | "/" ) <factor> }
<factor> ::= { ( "+" | "-" | "!" ) } <member> { "." <member> }
<member> ::= "(" <expression> ")"
		   | <id>
		   | <call>
		   | <int-literal>
		   | <float-literal>
		   | <string-literal>
		   | <true>
		   | <false>
<call> := <id> "(" [ <expression> { "," <expression> } ] ")"

<type> ::= ( "void" | "i8" | "i16" | "i32" | "u8" | "u16" | "u32" | "f32" | <id> )